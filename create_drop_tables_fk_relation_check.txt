-----SQL Practice------
SQL Server & SSMS Developer Installation

Prerequisites

Operating System: Windows 10 or higher.
Administrative Rights: Required for installing software.
Internet Connection: Needed to download installation files.


Installation Steps


1. Install SQL Server Developer Edition
Download: Visit the Microsoft SQL Server Downloads page and select the Developer edition.
Run the Installer: Launch the downloaded installer (.exe file).
Choose Basic for a quick setup or Custom if you need to adjust specific features.
Authentication Mode:
Windows Authentication: Recommended for local development.
Mixed Mode: Use if SQL Server Authentication is required (you will be prompted to set a password for the sa account).
Complete the Setup: Follow the installation wizard and restart your computer if prompted.

2. Install SQL Server Management Studio (SSMS)
Download: Go to the SSMS Download Page and download the latest version.
Run the Installer: Launch the installer and follow the prompts.
Launch SSMS: Open SSMS from the Start menu once the installation is complete.
Connect to Your SQL Server Instance
Server Name:
For a default instance, use (local), localhost, or ..
For a named instance (e.g., SQLEXPRESS), use YourComputerName\SQLEXPRESS.
Authentication: Choose Windows Authentication (or SQL Server Authentication if configured).
Verify Installation: Check the Object Explorer for system databases (master, model, msdb, tempdb).


Usage


This setup is intended for development and testing. With SSMS, you can:


Create and manage databases.
Write and execute T-SQL queries.
Explore SQL Server features.
Troubleshooting: Cannot Connect to SQL Server
Ensure: SQL Server service is running (check via SQL Server Configuration Manager or Windows Services).

Verify: Server name and authentication mode.

Check: Windows Firewall settings to ensure SQL Server is allowed.

Helpful Resources:

SSMS Installation Guide (YouTube)
Create Table Simple Guide (W3Schools)
Table Creation Challenges and Probable Solutions
Handling Table Existence and Conditional Creation
SQL Server does not support the CREATE TABLE IF NOT EXISTS syntax directly. Attempting to create a table that already exists will result in an error.

MySQL Example:

CREATE TABLE IF NOT EXISTS my_table (
  id INT PRIMARY KEY,
  name VARCHAR(50)
);
Solution for SQL Server: Use the OBJECT_ID function with an IF statement:

IF OBJECT_ID('dbo.my_table', 'U') IS NULL
BEGIN
  CREATE TABLE dbo.my_table (
      id INT IDENTITY(1,1) PRIMARY KEY,
      name NVARCHAR(50) NOT NULL
  );
END;

Explanation:
OBJECT_ID('dbo.my_table', 'U'): Returns the object ID for my_table if it exists (the 'U' parameter specifies a user-defined table).
IS NULL: Indicates the table does not exist.
The CREATE TABLE statement is executed only if the table isn’t found.
Dropping Tables: Challenges and Probable Solutions
Dropping a Non-Existent Table
Dropping a table that does not exist will throw an error.

Solution: Conditional Drops

For SQL Server 2016 and Later:

DROP TABLE IF EXISTS dbo.my_table;
For Earlier Versions:
sql
Copy
IF OBJECT_ID('dbo.my_table', 'U') IS NOT NULL
BEGIN
  DROP TABLE dbo.my_table;
END;
Dropping Tables with Dependent Constraints
SQL Server will not allow dropping a table that is referenced by foreign key constraints.

Solution: Drop Dependent Constraints First

For example, if a grade table references a student table:


-- First, drop the foreign key constraint from the dependent table
ALTER TABLE dbo.grade DROP CONSTRAINT fk_student_id;

-- Then, drop the referenced table safely
IF OBJECT_ID('dbo.student', 'U') IS NOT NULL
BEGIN
  DROP TABLE dbo.student;
END;


Explanation:
Conditional Dropping: Use DROP TABLE IF EXISTS (for SQL Server 2016+) or check with OBJECT_ID to avoid errors.
Handling Dependencies: Ensure that foreign key constraints are dropped or disabled before dropping the referenced table.
These practices help prevent common errors during schema changes.
Verifying Foreign Key Constraints and Relationships
Checking Foreign Key Constraints
Ensuring foreign key relationships are correctly set up is essential for maintaining data integrity.


SELECT name
FROM sys.foreign_keys
WHERE parent_object_id = OBJECT_ID('dbo.grade');


Explanation:
OBJECT_ID('dbo.grade'): Retrieves the unique object ID for the grade table.
sys.foreign_keys: Contains a record for every foreign key constraint in the database.
Filtering by parent_object_id returns constraints defined on the grade table.
Expected Result:

If the grade table is intended to reference both the student and subj tables, you should see two constraints (e.g., fk_student_id and fk_subject_id).
If only one constraint is returned, it may indicate a creation error or a schema reference issue.
Why It’s Important
Referential Integrity: Verifying foreign keys confirms that every grade is linked to an existing student and a valid subject.
Troubleshooting: If a foreign key is missing, consider:
Syntax errors or omissions in the CREATE TABLE statement.
Schema mismatches (e.g., using subj instead of dbo.subj).
Incomplete execution of the script.
Data Consistency: Proper foreign key constraints help prevent orphan records and maintain database consistency.


